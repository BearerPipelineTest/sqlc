package kotlin

import (
	"sort"
	"strings"

	"github.com/kyleconroy/sqlc/internal/kotlin/ast"
	"github.com/kyleconroy/sqlc/internal/kotlin/poet"
)

func packageNode(pkg string) *ast.Node {
	var n *ast.Node
	s := strings.Split(pkg, ".")
	sort.Reverse(sort.StringSlice(s))
	for _, name := range s {
		if n == nil {
			n = poet.NameReferenceExpression(name)
		} else {
			n = poet.DotQualifiedExpression(
				n,
				poet.NameReferenceExpression(name),
			)
		}
	}
	return poet.PackageDirective(n)
}

func buildModelsFile(ctx *ktTmplCtx, i *importer) *ast.Node {
	file := &ast.File{
		Body: []*ast.Node{
			poet.Comment("Code generated by sqlc. DO NOT EDIT."),
			packageNode(ctx.Package),
		},
	}

	for _, m := range ctx.DataClasses {
		list := &ast.ParameterList{}
		for _, f := range m.Fields {
			list.Parameters = append(list.Parameters, &ast.Parameter{
				Name: f.Name,
				Ref: &ast.TypeReference{
					Element: &ast.UserType{
						ReferenceExpression: &ast.NameReferenceExpression{
							Name: f.Type.String(),
						},
					},
				},
			})
		}
		def := &ast.Class{
			Name: m.Name,
			Modifiers: &ast.DeclarationModifierList{
				Annotations: []string{"data"},
			},
			Constructor: &ast.PrimaryConstructor{
				ValueParameterList: list,
			},
		}
		file.Body = append(file.Body, poet.Node(def))
	}

	return &ast.Node{
		Node: &ast.Node_File{
			File: file,
		},
	}
}
